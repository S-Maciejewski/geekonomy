{"version":3,"sources":["model.ts","store/actions.ts","store/reducers.ts","store/store.ts","services/ApiClient.ts","services/Engine.ts","components/DecisionControls/DecisionControls.tsx","components/Plots/Plot.tsx","components/Plots/Plots.tsx","components/ScoreIndicator/ScoreIndicator.tsx","components/ServerAddress/ServerAddress.tsx","components/Loading/Loading.tsx","components/LanguagePicker/LanguagePicker.tsx","views/Game.tsx","App.tsx","reportWebVitals.js","i18n/i18.ts","index.js","components/Plots/Plots.module.scss","components/DecisionControls/DecisionControls.module.scss","components/Loading/Loading.module.scss","components/ServerAddress/ServerAddress.module.scss","components/ScoreIndicator/ScoreIndicator.module.scss","views/Game.module.scss","components/LanguagePicker/LanguagePicker.module.scss"],"names":["QuizStatus","ActionType","initialState","sessionId","score","indicators","countries","quizStatus","NO_QUIZ","handleGetQuiz","state","action","handlePostAnswer","res","lastAnswer","country","correctCountry","correct","persistConfig","key","storage","persistedReducer","persistReducer","type","GET_QUIZ","POST_ANSWER","store","createStore","applyMiddleware","thunk","ApiClient","persistStore","localStorage","getItem","sessionIdKey","axios","get","getUrl","params","catch","err","console","error","data","refreshStoredSession","normalizeIndicators","dispatch","answer","post","url","log","setItem","API_URL","path","forEach","indicatorData","series","map","entry","parseFloat","stateSessionId","process","Engine","getQuizGameState","postQuizAnswer","getState","DecisionControls","t","useTranslation","className","styles","container","decisionControls","Button","disabled","QUIZ_ANSWERED","onClick","getGameState","variant","nextQuiz","button","FRESH_QUIZ","handleAnswer","Plot","countriesData","options","length","indicator","name","color","undefined","lineWidth","marker","enabled","symbol","highchartsOptions","title","text","legend","plot","highcharts","Highcharts","Plots","uniqueIndicators","Set","plots","uniqueIndicator","filter","prettyPrint","ScoreIndicator","ServerAddress","useState","setUrl","TextField","addressField","value","valueOf","id","label","onChange","event","preventDefault","target","handleUrlChange","connectButton","setApiUrl","Loading","loading","CircularProgress","size","circularProgress","message","LanguagePicker","lang","i18n","FormControl","fullWidth","InputLabel","Select","language","split","changeLanguage","code","icon","MenuItem","flagEmoji","GameView","setState","setLoading","useEffect","a","setTimeout","e","subscribe","bottomContainer","rightSide","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","resources","en","translation","pl","use","LanguageDetector","initReactI18next","init","fallbackLng","interpolation","escapeValue","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.1f6fcee6.chunk.js","sourcesContent":["export enum QuizStatus {\n    NO_QUIZ = 'NO_QUIZ',\n    FRESH_QUIZ = 'FRESH_QUIZ',\n    QUIZ_ANSWERED = 'QUIZ_ANSWERED',\n}\n\nexport interface GameState {\n    sessionId: string\n    score: number\n    indicators: IndicatorData[]\n    countries: Country[]\n    quizStatus: QuizStatus\n    lastAnswer?: LastAnswer\n}\n\nexport interface IndicatorData {\n    series: [number, number][]\n    indicator: Indicator\n    country?: Country\n}\n\nexport type Country = string\n\nexport type Indicator = string\n\nexport interface ServerResponse {\n    sessionId: string\n    score: number\n    quizStatus: QuizStatus\n}\n\nexport interface LastAnswer {\n    country: string\n    correctCountry: string\n    correct: boolean\n}\n\nexport interface QuizServerResponse extends ServerResponse {\n    indicators: IndicatorData[]\n    countries: Country[]\n}\n\nexport interface AnswerServerResponse extends ServerResponse, LastAnswer {\n    indicators: IndicatorData[]\n}","import {AnswerServerResponse, GameState} from \"../model\";\n\nexport enum ActionType {\n    GET_QUIZ = 'GET_QUIZ',\n    POST_ANSWER = 'POST_ANSWER',\n}\n\nexport interface Action {\n    type: ActionType\n}\n\nexport interface GetQuizAction extends Action {\n    type: ActionType.GET_QUIZ\n    state: GameState\n}\n\nexport interface PostAnswerAction extends Action {\n    type: ActionType.POST_ANSWER\n    res: AnswerServerResponse\n}","import {Action, ActionType, GetQuizAction, PostAnswerAction} from \"./actions\";\nimport {GameState, QuizStatus} from \"../model\";\n\nconst initialState: GameState = {\n    sessionId: '',\n    score: 0,\n    indicators: [],\n    countries: [],\n    quizStatus: QuizStatus.NO_QUIZ,\n}\n\nconst handleGetQuiz = (state: GameState, action: GetQuizAction): GameState => {\n    return {\n        ...state,\n        ...action.state\n    }\n}\n\nconst handlePostAnswer = (state: GameState, action: PostAnswerAction): GameState => {\n    return {\n        ...state,\n        score: action.res.score,\n        indicators: action.res.indicators,\n        quizStatus: action.res.quizStatus,\n        lastAnswer: {\n            country: action.res.country,\n            correctCountry: action.res.correctCountry,\n            correct: action.res.correct\n        }\n    }\n}\n\nexport default function reducer(state = initialState, action: Action): GameState {\n    // console.log('Reducer input: ', state, action)\n\n    switch (action.type) {\n        case ActionType.GET_QUIZ:\n            state = handleGetQuiz(state, action as GetQuizAction)\n            break\n        case ActionType.POST_ANSWER:\n            state = handlePostAnswer(state, action as PostAnswerAction)\n            break\n    }\n\n    return state\n}\n","import storage from \"redux-persist/lib/storage\";\nimport {persistStore, persistReducer} from 'redux-persist'\nimport reducer from \"./reducers\";\nimport {applyMiddleware, createStore} from \"redux\";\nimport thunk from \"redux-thunk\";\n\nconst persistConfig = {\n    key: 'root',\n    storage\n}\n\nconst persistedReducer = persistReducer(persistConfig, reducer)\nexport const store = createStore(persistedReducer, applyMiddleware(thunk))\nexport const persistor = persistStore(store)","import axios from \"axios\"\nimport {AnswerServerResponse, IndicatorData, QuizServerResponse} from \"../model\";\nimport {store} from \"../store/store\";\nimport {ActionType, GetQuizAction} from \"../store/actions\";\n\nexport class ApiClient {\n    static API_URL = process.env.API_URL || localStorage.getItem('API_URL') || 'http://127.0.0.1:8080'\n    static sessionIdKey = 'sessionId'\n\n    static async getQuizGameState(): Promise<void> {\n        // TODO: Decide whether to store sessionId in localStorage manually or use persisted redux\n        let sessionId = localStorage.getItem(ApiClient.sessionIdKey)\n        const res = await axios.get<QuizServerResponse>(ApiClient.getUrl('quiz'), {\n            params: {sessionId}\n        }).catch((err) => {\n            console.error('Axios error', err)\n            return {data: {} as QuizServerResponse}\n        })\n\n        const state = ({...res.data})\n        ApiClient.refreshStoredSession(sessionId, state.sessionId)\n        ApiClient.normalizeIndicators(state.indicators)\n\n        store.dispatch(({\n            type: ActionType.GET_QUIZ,\n            state\n        }) as GetQuizAction)\n    }\n\n    static async postQuizAnswer(answer: string): Promise<void> {\n        let sessionId = localStorage.getItem(ApiClient.sessionIdKey)\n        const res = await axios.post<{ answer: string }, { data: AnswerServerResponse }>(ApiClient.getUrl('answer'), {\n            answer\n        }, {\n            params: {sessionId}\n        }).catch((err) => {\n            console.error('Axios error', err)\n            return {data: {} as AnswerServerResponse}\n        })\n\n        ApiClient.normalizeIndicators(res.data.indicators)\n\n        store.dispatch(({\n            type: ActionType.POST_ANSWER,\n            res: res.data\n        }))\n    }\n\n    static setApiUrl(url: string) {\n        console.log(`Setting API_URL to: ${url}`)\n        localStorage.setItem('API_URL', url)\n        ApiClient.API_URL = url\n    }\n\n    static getUrl(path: string) {\n        return `${ApiClient.API_URL}/${path}`\n    }\n\n    private static normalizeIndicators(indicators: IndicatorData[]) {\n        indicators.forEach(indicatorData => {\n            // @ts-ignore\n            indicatorData.series = indicatorData.series.map(entry => [parseFloat(entry[0]), parseFloat(entry[1])])\n        })\n    }\n\n    private static refreshStoredSession(sessionId: string | null, stateSessionId: string) {\n        if (!sessionId || sessionId !== stateSessionId) {\n            console.log(`No matching session found on server - received a fresh session: ${stateSessionId}`)\n            localStorage.setItem(ApiClient.sessionIdKey, stateSessionId)\n        }\n    }\n}","import {ApiClient} from \"./ApiClient\";\nimport {store} from \"../store/store\";\n\n\nexport class Engine {\n\n    static async getGameState() {\n        await ApiClient.getQuizGameState()\n    }\n\n    static async handleAnswer(answer: string) {\n        await ApiClient.postQuizAnswer(answer)\n        store.getState()\n    }\n}","import {Button} from \"@mui/material\";\nimport React from \"react\";\nimport {Country, QuizStatus} from \"../../model\";\nimport styles from './DecisionControls.module.scss'\nimport {Engine} from \"../../services/Engine\";\nimport {useTranslation} from \"react-i18next\";\n\nexport interface ControlsProps {\n    countries: Country[]\n    quizStatus: QuizStatus\n}\n\nexport const DecisionControls: React.FC<ControlsProps> = ({countries, quizStatus}) => {\n    const {t} = useTranslation()\n\n    return (<div className={styles.container}>\n        <div className={styles.decisionControls}>\n            <Button disabled={quizStatus !== QuizStatus.QUIZ_ANSWERED} onClick={() => {\n                Engine.getGameState()\n            }} variant={'contained'} className={styles.nextQuiz}>\n                {t('controls.next_quiz')}\n            </Button>\n            {\n                countries.map(country =>\n                    <div className={styles.button}>\n                        <Button disabled={quizStatus !== QuizStatus.FRESH_QUIZ} variant=\"contained\"\n                                onClick={() => Engine.handleAnswer(country)}>\n                            {t(`country.${country}`)}\n                        </Button>\n                    </div>\n                )\n            }\n        </div>\n    </div>\n)}","import * as React from 'react'\nimport * as Highcharts from 'highcharts'\nimport HighchartsReact from \"highcharts-react-official\";\nimport {IndicatorData, LastAnswer} from \"../../model\";\nimport {StandardProps} from \"../types\";\nimport styles from './Plots.module.scss'\nimport {useTranslation} from \"react-i18next\";\nimport {XrangePointOptionsObject} from \"highcharts\";\n\nexport interface PlotProps {\n    countriesData: IndicatorData[]\n    lastAnswer?: LastAnswer\n    options?: Highcharts.Options\n}\n\nexport const Plot: React.FC<PlotProps & StandardProps> = ({countriesData, options, lastAnswer}) => {\n    const {t} = useTranslation()\n\n    const series = lastAnswer && countriesData.length > 1 ? countriesData.map((indicator: IndicatorData) => ({\n            name: t(`country.${indicator.country}`),\n            data: indicator.series as Partial<XrangePointOptionsObject>,\n            type: 'line',\n            color: indicator.country === lastAnswer.correctCountry ? '#006ABD' : undefined,\n            lineWidth: indicator.country === lastAnswer.correctCountry ? 2 : 1,\n        marker: {\n            enabled: indicator.country === lastAnswer?.correctCountry,\n            symbol: 'circle',\n        }\n        })) :\n        [\n            {\n                name: '???',\n                data: countriesData[0].series as Partial<XrangePointOptionsObject>,\n                type: 'line',\n                color: '#006ABD',\n                lineWidth: 2,\n                marker: {\n                    enabled: true,\n                    symbol: 'circle'\n                }\n            }\n        ]\n\n    console.log(series)\n    const highchartsOptions: Highcharts.Options = {\n        title: {\n            text: t(`indicator.${countriesData[0].indicator}`)\n        },\n        // @ts-ignore\n        series: series,\n        legend: {\n            enabled: false\n        },\n        ...options\n    }\n\n    return <div className={styles.plot}>\n        <HighchartsReact className={styles.highcharts} highcharts={Highcharts} options={highchartsOptions}/>\n    </div>\n}\n","import * as React from 'react'\nimport {IndicatorData, LastAnswer} from \"../../model\";\nimport {Plot} from \"./Plot\";\nimport styles from './Plots.module.scss'\nimport {StandardProps} from \"../types\";\n\nexport interface PlotsProps {\n    indicators: IndicatorData[]\n    lastAnswer?: LastAnswer\n}\n\nexport const Plots: React.FC<PlotsProps & StandardProps> = ({indicators, lastAnswer}) => {\n    const uniqueIndicators = [...new Set(indicators.map(indicator => indicator.indicator))]\n    return (\n        <div className={styles.plots}>\n            {\n                uniqueIndicators.map((uniqueIndicator => <Plot countriesData={indicators.filter(indicator => indicator.indicator === uniqueIndicator)} lastAnswer={lastAnswer}/>))\n            }\n        </div>\n    )\n}\n","import React from \"react\";\nimport {LastAnswer, QuizStatus} from \"../../model\";\nimport styles from './ScoreIndicator.module.scss'\nimport {useTranslation} from \"react-i18next\";\n\nexport interface ScoreProps {\n    score: number\n    lastAnswer?: LastAnswer\n    quizStatus: QuizStatus\n}\n\nconst prettyPrint = (lastAnswer: LastAnswer, t: Function) => {\n    return lastAnswer.correct ?\n        <span>{t('score.correct')}</span> :\n        <span>{t('score.incorrect.1')} <b>{t(`country.${lastAnswer.correctCountry}`)}</b> {t('score.incorrect.2')} <i>{t(`country.${lastAnswer.country}`)}</i></span>\n}\n\nexport const ScoreIndicator: React.FC<ScoreProps> = ({score, lastAnswer, quizStatus}) => {\n    const {t} = useTranslation()\n\n    return (\n        <div className={styles.container}>\n            <div className={styles.score}>\n                <span>{t('score')}: <b>{score}</b></span>\n            </div>\n            <div>\n                {\n                    lastAnswer && quizStatus === QuizStatus.QUIZ_ANSWERED &&\n                    <span>{prettyPrint(lastAnswer, t)}</span>\n                }\n            </div>\n        </div>)\n}","import React, {ChangeEvent, useState} from \"react\";\nimport {Button} from \"@mui/material\";\nimport styles from './ServerAddress.module.scss'\nimport TextField from \"@mui/material/TextField\";\nimport {ApiClient} from \"../../services/ApiClient\";\nimport {useTranslation} from \"react-i18next\";\n\nexport const ServerAddress: React.FC = () => {\n    const {t} = useTranslation()\n\n    const [url, setUrl] = useState(ApiClient.API_URL)\n\n    const handleUrlChange = (event: ChangeEvent<HTMLInputElement>) => {\n        event.preventDefault()\n        setUrl(event.target.value)\n    }\n\n    const handleConnect = () => {\n        ApiClient.setApiUrl(url)\n    }\n\n    return (\n        <div className={styles.container}>\n            <TextField className={styles.addressField} value={url.valueOf()}\n                       id=\"outlined-basic\" label={t('controls.server_address')} variant=\"outlined\"\n                       onChange={(event) => handleUrlChange(event as ChangeEvent<HTMLInputElement>)}\n            />\n            <Button className={styles.connectButton} onClick={handleConnect}>{t('controls.connect')}</Button>\n        </div>\n    )\n}","import React from \"react\";\nimport {CircularProgress} from \"@mui/material\";\nimport styles from './Loading.module.scss'\nimport {ServerAddress} from \"../ServerAddress/ServerAddress\";\nimport {useTranslation} from \"react-i18next\";\n\nexport const Loading: React.FC = () => {\n    const {t} = useTranslation()\n\n    return <>\n        <div className={styles.loading}>\n            <div>\n                <CircularProgress size={80} className={styles.circularProgress}/>\n                <div className={styles.message}>\n                    {t('loading')}\n                    <ServerAddress/>\n                </div>\n            </div>\n\n        </div>\n    </>\n}","import React from \"react\";\nimport {FormControl, InputLabel, MenuItem, Select, SelectChangeEvent} from \"@mui/material\";\nimport styles from './LanguagePicker.module.scss'\nimport {useTranslation} from \"react-i18next\";\n\nexport const LanguagePicker: React.FC = () => {\n    const {t, i18n} = useTranslation()\n\n    const handleChange = (event: SelectChangeEvent<string>) => {\n        i18n.changeLanguage(event.target.value)\n    }\n\n    const normalizeLanguage = (lang: string) => {\n        return lang.split('-')[0]\n    }\n\n    const supportedLanguages = [\n        {\n            code: 'en',\n            icon: '🇬🇧'\n        },\n        {\n            code: 'pl',\n            icon: '🇵🇱'\n        }\n    ]\n\n    return (\n        <div className={styles.container}>\n            <FormControl fullWidth>\n                <InputLabel id=\"demo-simple-select-label\">{t('language')}</InputLabel>\n                <Select\n                    value={normalizeLanguage(i18n.language)}\n                    label={t('language')}\n                    onChange={(value) => handleChange(value)}\n                >\n                    {\n                        supportedLanguages.map(language =>\n                            <MenuItem value={language.code}>\n                                <span className={styles.flagEmoji}>\n                                    {language.icon}\n                                </span>\n                            </MenuItem>\n                        )\n                    }\n                </Select>\n            </FormControl>\n        </div>\n    )\n}","import * as React from \"react\";\nimport {DecisionControls} from \"../components/DecisionControls/DecisionControls\";\nimport {useEffect, useState} from \"react\";\nimport {GameState} from \"../model\";\nimport {Plots} from \"../components/Plots/Plots\";\nimport {store} from \"../store/store\";\nimport {Engine} from \"../services/Engine\";\nimport {ScoreIndicator} from \"../components/ScoreIndicator/ScoreIndicator\";\nimport {Loading} from \"../components/Loading/Loading\";\nimport styles from './Game.module.scss'\nimport {ServerAddress} from \"../components/ServerAddress/ServerAddress\";\nimport {LanguagePicker} from \"../components/LanguagePicker/LanguagePicker\";\n\n\nexport const GameView: React.FC = () => {\n    const [state, setState] = useState<GameState>({} as GameState)\n    const [loading, setLoading] = useState<Boolean>(true)\n\n\n    useEffect(() => {\n        const getGameState = async () => {\n            try {\n                setLoading(true)\n                await Engine.getGameState()\n                setLoading(false)\n            } catch (e) {\n                console.log('Error on getting game state', e)\n                setTimeout(getGameState, 5000)\n            }\n        }\n\n        getGameState().catch(e => console.log('Error on getting game state', e))\n\n        store.subscribe(() => {\n            setState(store.getState())\n        })\n    }, [])\n\n    return (\n        <div>\n            {loading && <Loading/>}\n            {!loading && <>\n                <Plots indicators={state.indicators} lastAnswer={state.lastAnswer}/>\n                <div className={styles.bottomContainer}>\n                    <div>\n                        <ScoreIndicator quizStatus={state.quizStatus} score={state.score}\n                                        lastAnswer={state.lastAnswer}/>\n                    </div>\n                    <div className={styles.rightSide}>\n                        <LanguagePicker/>\n                        <ServerAddress/>\n                    </div>\n                    <div>\n                        <DecisionControls quizStatus={state.quizStatus} countries={state.countries}/>\n                    </div>\n                </div>\n            </>}\n        </div>\n    )\n}","import './App.css';\nimport {GameView} from \"./views/Game\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <GameView/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import i18n from 'i18next'\nimport { initReactI18next } from 'react-i18next'\nimport LanguageDetector from 'i18next-browser-languagedetector'\n\nimport translationEn from './locales/en.json'\nimport translationPl from './locales/pl.json'\n\nconst resources = {\n    en: {\n        translation: translationEn,\n    },\n    pl: {\n        translation: translationPl,\n    },\n}\n\n// @ts-ignore\ni18n.use(LanguageDetector)\n    .use(initReactI18next)\n    .init({\n        resources,\n        fallbackLng: 'en',\n        // keySeparator: false,\n        interpolation: {\n            escapeValue: false,\n        },\n    })\n\nexport default i18n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport './i18n/i18'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"plot\":\"Plots_plot__WbCFU\",\"highcharts\":\"Plots_highcharts__1gAik\",\"plots\":\"Plots_plots__2cuRz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"DecisionControls_container__2paiT\",\"button\":\"DecisionControls_button__1VI33\",\"decisionControls\":\"DecisionControls_decisionControls__1KGLM\",\"nextQuiz\":\"DecisionControls_nextQuiz__3NGOv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loading\":\"Loading_loading__3SgGS\",\"circularProgress\":\"Loading_circularProgress__dOjQR\",\"message\":\"Loading_message__3DTTj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"ServerAddress_container__1lntL\",\"connectButton\":\"ServerAddress_connectButton__1jGj_\",\"addressField\":\"ServerAddress_addressField__28zoc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"ScoreIndicator_container__1kj0R\",\"score\":\"ScoreIndicator_score__gJmvX\",\"answer\":\"ScoreIndicator_answer__3iiG8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"bottomContainer\":\"Game_bottomContainer__U_o2q\",\"rightSide\":\"Game_rightSide__2Rs7D\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"LanguagePicker_container__2b-kH\",\"flagEmoji\":\"LanguagePicker_flagEmoji__3l-6K\"};"],"sourceRoot":""}