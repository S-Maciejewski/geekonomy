{"version":3,"sources":["model.ts","store/actions.ts","store/reducers.ts","store/store.ts","services/ApiClient.ts","services/Engine.ts","components/DecisionControls/DecisionControls.tsx","components/Plots/Plot.tsx","components/Plots/Plots.tsx","assets/score-icon.svg","components/ScoreIndicator/ScoreIndicator.tsx","components/Loading/Loading.tsx","components/LanguagePicker/LanguagePicker.tsx","assets/geekonomy-logo-long.svg","views/Game.tsx","App.tsx","reportWebVitals.js","i18n/i18.ts","index.js","components/DecisionControls/DecisionControls.module.scss","components/LanguagePicker/LanguagePicker.module.scss","components/Plots/Plots.module.scss","components/ScoreIndicator/ScoreIndicator.module.scss","views/Game.module.scss","components/Loading/Loading.module.scss"],"names":["QuizStatus","ActionType","initialState","sessionId","score","indicators","countries","quizStatus","NO_QUIZ","handleGetQuiz","state","action","handlePostAnswer","res","lastAnswer","country","correctCountry","correct","handleRequestSent","REQUEST_SENT","persistConfig","key","storage","persistedReducer","persistReducer","type","GET_QUIZ","POST_ANSWER","store","createStore","applyMiddleware","thunk","ApiClient","persistStore","localStorage","getItem","sessionIdKey","dispatch","axios","get","getUrl","params","catch","err","console","error","data","refreshStoredSession","normalizeIndicators","answer","post","url","log","setItem","API_URL","path","forEach","indicatorData","series","map","entry","parseFloat","stateSessionId","Engine","getQuizGameState","postQuizAnswer","getState","DecisionControls","t","useTranslation","controlsDisabledForLoading","className","styles","container","decisionControls","loadingIndicatorContainer","CircularProgress","size","circularProgress","Button","disabled","QUIZ_ANSWERED","onClick","getGameState","variant","nextQuiz","button","FRESH_QUIZ","handleAnswer","Plot","countriesData","options","length","indicator","name","color","undefined","lineWidth","marker","enabled","symbol","highchartsOptions","title","text","legend","plot","highcharts","Highcharts","Plots","uniqueIndicators","Set","plots","uniqueIndicator","filter","prettyPrint","ScoreIndicator","src","ScoreIconSvg","alt","scoreIcon","Loading","loading","LanguagePicker","lang","i18n","supportedLanguages","code","icon","FormControl","fullWidth","InputLabel","id","Select","value","language","split","label","onChange","event","changeLanguage","target","select","MenuItem","flagEmoji","GameView","useState","setState","setLoading","useEffect","a","setTimeout","e","subscribe","controlsContainer","rightSide","GeekonomyLogo","logo","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","resources","en","translation","pl","use","LanguageDetector","initReactI18next","init","fallbackLng","interpolation","escapeValue","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.5c52a133.chunk.js","sourcesContent":["export enum QuizStatus {\n    NO_QUIZ = 'NO_QUIZ',\n    FRESH_QUIZ = 'FRESH_QUIZ',\n    QUIZ_ANSWERED = 'QUIZ_ANSWERED',\n    REQUEST_SENT = 'REQUEST_SENT',\n}\n\nexport interface GameState {\n    sessionId: string\n    score: number\n    indicators: IndicatorData[]\n    countries: Country[]\n    quizStatus: QuizStatus\n    lastAnswer?: LastAnswer\n}\n\nexport interface IndicatorData {\n    series: [number, number][]\n    indicator: Indicator\n    country?: Country\n}\n\nexport type Country = string\n\nexport type Indicator = string\n\nexport interface ServerResponse {\n    sessionId: string\n    score: number\n    quizStatus: QuizStatus\n}\n\nexport interface LastAnswer {\n    country: string\n    correctCountry: string\n    correct: boolean\n}\n\nexport interface QuizServerResponse extends ServerResponse {\n    indicators: IndicatorData[]\n    countries: Country[]\n}\n\nexport interface AnswerServerResponse extends ServerResponse, LastAnswer {\n    indicators: IndicatorData[]\n}","import {AnswerServerResponse, GameState} from \"../model\";\n\nexport enum ActionType {\n    GET_QUIZ = 'GET_QUIZ',\n    POST_ANSWER = 'POST_ANSWER',\n    REQUEST_SENT = 'REQUEST_SENT',\n}\n\nexport interface Action {\n    type: ActionType\n}\n\nexport interface GetQuizAction extends Action {\n    type: ActionType.GET_QUIZ\n    state: GameState\n}\n\nexport interface PostAnswerAction extends Action {\n    type: ActionType.POST_ANSWER\n    res: AnswerServerResponse\n}\n\nexport interface RequestSentAction extends Action {\n    type: ActionType.REQUEST_SENT\n}","import {Action, ActionType, GetQuizAction, PostAnswerAction, RequestSentAction} from \"./actions\";\nimport {GameState, QuizStatus} from \"../model\";\n\nconst initialState: GameState = {\n    sessionId: '',\n    score: 0,\n    indicators: [],\n    countries: [],\n    quizStatus: QuizStatus.NO_QUIZ,\n}\n\nconst handleGetQuiz = (state: GameState, action: GetQuizAction): GameState => {\n    return {\n        ...state,\n        ...action.state\n    }\n}\n\nconst handlePostAnswer = (state: GameState, action: PostAnswerAction): GameState => {\n    return {\n        ...state,\n        score: action.res.score,\n        indicators: action.res.indicators,\n        quizStatus: action.res.quizStatus,\n        lastAnswer: {\n            country: action.res.country,\n            correctCountry: action.res.correctCountry,\n            correct: action.res.correct\n        }\n    }\n}\n\nconst handleRequestSent = (state: GameState): GameState => {\n    return {\n        ...state,\n        quizStatus: QuizStatus.REQUEST_SENT\n    }\n}\n\nexport default function reducer(state = initialState, action: Action): GameState {\n    // console.log('Reducer input: ', state, action)\n\n    switch (action.type) {\n        case ActionType.GET_QUIZ:\n            state = handleGetQuiz(state, action as GetQuizAction)\n            break\n        case ActionType.POST_ANSWER:\n            state = handlePostAnswer(state, action as PostAnswerAction)\n            break\n        case ActionType.REQUEST_SENT:\n            state = handleRequestSent(state)\n            break\n    }\n\n    return state\n}\n","import storage from \"redux-persist/lib/storage\";\nimport {persistStore, persistReducer} from 'redux-persist'\nimport reducer from \"./reducers\";\nimport {applyMiddleware, createStore} from \"redux\";\nimport thunk from \"redux-thunk\";\n\nconst persistConfig = {\n    key: 'root',\n    storage\n}\n\nconst persistedReducer = persistReducer(persistConfig, reducer)\nexport const store = createStore(persistedReducer, applyMiddleware(thunk))\nexport const persistor = persistStore(store)","import axios from \"axios\"\nimport {AnswerServerResponse, IndicatorData, QuizServerResponse} from \"../model\";\nimport {store} from \"../store/store\";\nimport {ActionType, GetQuizAction} from \"../store/actions\";\n\nexport class ApiClient {\n    static API_URL = process.env.REACT_APP_API_URL || localStorage.getItem('API_URL') || 'http://127.0.0.1:80'\n    static sessionIdKey = 'sessionId'\n\n    static async getQuizGameState(): Promise<void> {\n        // TODO: Decide whether to store sessionId in localStorage manually or use persisted redux\n        let sessionId = localStorage.getItem(ApiClient.sessionIdKey)\n        store.dispatch({\n            type: ActionType.REQUEST_SENT\n        })\n\n        const res = await axios.get<QuizServerResponse>(ApiClient.getUrl('quiz'), {\n            params: {sessionId}\n        }).catch((err) => {\n            console.error('Axios error', err)\n            return {data: {} as QuizServerResponse}\n        })\n\n        const state = ({...res.data})\n        ApiClient.refreshStoredSession(sessionId, state.sessionId)\n        ApiClient.normalizeIndicators(state.indicators)\n\n        store.dispatch(({\n            type: ActionType.GET_QUIZ,\n            state\n        }) as GetQuizAction)\n    }\n\n    static async postQuizAnswer(answer: string): Promise<void> {\n        let sessionId = localStorage.getItem(ApiClient.sessionIdKey)\n        store.dispatch({\n            type: ActionType.REQUEST_SENT\n        })\n\n        const res = await axios.post<{ answer: string }, { data: AnswerServerResponse }>(ApiClient.getUrl('answer'), {\n            answer\n        }, {\n            params: {sessionId}\n        }).catch((err) => {\n            console.error('Axios error', err)\n            return {data: {} as AnswerServerResponse}\n        })\n\n        ApiClient.normalizeIndicators(res.data.indicators)\n\n        store.dispatch(({\n            type: ActionType.POST_ANSWER,\n            res: res.data\n        }))\n    }\n\n    static setApiUrl(url: string) {\n        console.log(`Setting API_URL to: ${url}`)\n        localStorage.setItem('API_URL', url)\n        ApiClient.API_URL = url\n    }\n\n    static getUrl(path: string) {\n        return `${ApiClient.API_URL}/${path}`\n    }\n\n    private static normalizeIndicators(indicators: IndicatorData[]) {\n        indicators.forEach(indicatorData => {\n            // @ts-ignore\n            indicatorData.series = indicatorData.series.map(entry => [parseFloat(entry[0]), parseFloat(entry[1])])\n        })\n    }\n\n    private static refreshStoredSession(sessionId: string | null, stateSessionId: string) {\n        if (!sessionId || sessionId !== stateSessionId) {\n            console.log(`No matching session found on server - received a fresh session: ${stateSessionId}`)\n            localStorage.setItem(ApiClient.sessionIdKey, stateSessionId)\n        }\n    }\n}\n","import {ApiClient} from \"./ApiClient\";\nimport {store} from \"../store/store\";\n\n\nexport class Engine {\n\n    static async getGameState() {\n        await ApiClient.getQuizGameState()\n    }\n\n    static async handleAnswer(answer: string) {\n        await ApiClient.postQuizAnswer(answer)\n        store.getState()\n    }\n}","import {Button, CircularProgress} from \"@mui/material\";\nimport React from \"react\";\nimport {Country, QuizStatus} from \"../../model\";\nimport styles from './DecisionControls.module.scss'\nimport {Engine} from \"../../services/Engine\";\nimport {useTranslation} from \"react-i18next\";\n\nexport interface ControlsProps {\n    countries: Country[]\n    quizStatus: QuizStatus\n}\n\nexport const DecisionControls: React.FC<ControlsProps> = ({countries, quizStatus}) => {\n    const {t} = useTranslation()\n\n    const controlsDisabledForLoading = () => quizStatus === QuizStatus.REQUEST_SENT\n\n    return (\n        <div className={styles.container}>\n            <div className={styles.decisionControls}>\n                <div className={styles.loadingIndicatorContainer}>\n                    {controlsDisabledForLoading() && <CircularProgress size={25} className={styles.circularProgress}/>}\n                </div>\n                <Button disabled={controlsDisabledForLoading() || quizStatus !== QuizStatus.QUIZ_ANSWERED}\n                        onClick={() => {\n                            Engine.getGameState()\n                        }} variant={'contained'} className={styles.nextQuiz}>\n                    {t('controls.next_quiz')}\n                </Button>\n                {\n                    countries.map(country =>\n                        <div className={styles.button}>\n                            <Button disabled={controlsDisabledForLoading() || quizStatus !== QuizStatus.FRESH_QUIZ}\n                                    variant=\"contained\"\n                                    onClick={() => Engine.handleAnswer(country)}>\n                                {t(`country.${country}`)}\n                            </Button>\n                        </div>\n                    )\n                }\n            </div>\n        </div>\n    )\n}","import * as React from 'react'\nimport * as Highcharts from 'highcharts'\nimport HighchartsReact from \"highcharts-react-official\";\nimport {IndicatorData, LastAnswer} from \"../../model\";\nimport {StandardProps} from \"../types\";\nimport styles from './Plots.module.scss'\nimport {useTranslation} from \"react-i18next\";\nimport {XrangePointOptionsObject} from \"highcharts\";\n\nexport interface PlotProps {\n    countriesData: IndicatorData[]\n    lastAnswer?: LastAnswer\n    options?: Highcharts.Options\n}\n\nexport const Plot: React.FC<PlotProps & StandardProps> = ({countriesData, options, lastAnswer}) => {\n    const {t} = useTranslation()\n\n    const series = lastAnswer && countriesData.length > 1 ? countriesData.map((indicator: IndicatorData) => ({\n            name: t(`country.${indicator.country}`),\n            data: indicator.series as Partial<XrangePointOptionsObject>,\n            type: 'line',\n            color: indicator.country === lastAnswer.correctCountry ? '#006ABD' : undefined,\n            lineWidth: indicator.country === lastAnswer.correctCountry ? 2 : 1,\n        marker: {\n            enabled: indicator.country === lastAnswer?.correctCountry,\n            symbol: 'circle',\n        }\n        })) :\n        [\n            {\n                name: '???',\n                data: countriesData[0].series as Partial<XrangePointOptionsObject>,\n                type: 'line',\n                color: '#006ABD',\n                lineWidth: 2,\n                marker: {\n                    enabled: true,\n                    symbol: 'circle'\n                }\n            }\n        ]\n\n    const highchartsOptions: Highcharts.Options = {\n        title: {\n            text: t(`indicator.${countriesData[0].indicator}`)\n        },\n        // @ts-ignore\n        series: series,\n        legend: {\n            enabled: false\n        },\n        ...options\n    }\n\n    return <div className={styles.plot}>\n        <HighchartsReact className={styles.highcharts} highcharts={Highcharts} options={highchartsOptions}/>\n    </div>\n}\n","import * as React from 'react'\nimport {IndicatorData, LastAnswer} from \"../../model\";\nimport {Plot} from \"./Plot\";\nimport styles from './Plots.module.scss'\nimport {StandardProps} from \"../types\";\n\nexport interface PlotsProps {\n    indicators: IndicatorData[]\n    lastAnswer?: LastAnswer\n}\n\nexport const Plots: React.FC<PlotsProps & StandardProps> = ({indicators, lastAnswer}) => {\n    const uniqueIndicators = [...new Set(indicators.map(indicator => indicator.indicator))]\n    return (\n        <div className={styles.plots}>\n            {\n                uniqueIndicators.map((uniqueIndicator => <Plot countriesData={indicators.filter(indicator => indicator.indicator === uniqueIndicator)} lastAnswer={lastAnswer}/>))\n            }\n        </div>\n    )\n}\n","export default __webpack_public_path__ + \"static/media/score-icon.2d06fc3a.svg\";","import React from \"react\";\nimport {LastAnswer, QuizStatus} from \"../../model\";\nimport styles from './ScoreIndicator.module.scss'\nimport {useTranslation} from \"react-i18next\";\nimport ScoreIconSvg from \"../../assets/score-icon.svg\";\n\nexport interface ScoreProps {\n    score: number\n    lastAnswer?: LastAnswer\n    quizStatus: QuizStatus\n}\n\nconst prettyPrint = (lastAnswer: LastAnswer, t: Function) => {\n    return lastAnswer.correct ?\n        <span>{t('score.correct')}</span> :\n        <span>{t('score.incorrect.1')} <b>{t(`country.${lastAnswer.correctCountry}`)}</b> {t('score.incorrect.2')}\n            <i>{t(`country.${lastAnswer.country}`)}</i></span>\n}\n\nexport const ScoreIndicator: React.FC<ScoreProps> = ({score, lastAnswer, quizStatus}) => {\n    const {t} = useTranslation()\n\n    return (\n        <div className={styles.container}>\n            <div className={styles.score}>\n                <span>\n                    <img src={ScoreIconSvg} alt=\"\" className={styles.scoreIcon}/>\n                    {t('score')}: <b>{score}</b></span>\n            </div>\n            <div>\n                {\n                    lastAnswer && quizStatus === QuizStatus.QUIZ_ANSWERED &&\n                    <span>{prettyPrint(lastAnswer, t)}</span>\n                }\n            </div>\n        </div>)\n}\n","import React from \"react\";\nimport {CircularProgress} from \"@mui/material\";\nimport styles from './Loading.module.scss'\n\nexport const Loading: React.FC = () => {\n\n    return <>\n        <div className={styles.loading}>\n            <div>\n                <CircularProgress size={80} className={styles.circularProgress}/>\n            </div>\n\n        </div>\n    </>\n}\n","import React from \"react\";\nimport {FormControl, InputLabel, MenuItem, Select, SelectChangeEvent} from \"@mui/material\";\nimport styles from './LanguagePicker.module.scss'\nimport {useTranslation} from \"react-i18next\";\n\nexport const LanguagePicker: React.FC = () => {\n    const {t, i18n} = useTranslation()\n\n    const handleChange = (event: SelectChangeEvent<string>) => {\n        i18n.changeLanguage(event.target.value)\n    }\n\n    const normalizeLanguage = (lang: string) => {\n        return lang.split('-')[0]\n    }\n\n    const supportedLanguages = [\n        {\n            code: 'en',\n            icon: '🇬🇧',\n            className: styles[\"flag:GB\"],\n        },\n        {\n            code: 'pl',\n            icon: '🇵🇱',\n            className: styles[\"flag:PL\"],\n        }\n    ]\n\n    return (\n        <div className={styles.container}>\n            <FormControl fullWidth>\n                <InputLabel id=\"demo-simple-select-label\">{t('language')}</InputLabel>\n                <Select\n                    value={normalizeLanguage(i18n.language)}\n                    label={t('language')}\n                    onChange={(value) => handleChange(value)}\n                    className={styles.select}\n                >\n                    {\n                        supportedLanguages.map(language =>\n                            <MenuItem value={language.code}>\n                                <div className={styles.flagEmoji}>\n                                    {/*Language icon is problematic - doesn't work on most browsers including Chrome\n                                    That's why I'm using flags from https://unpkg.com/country-flag-icons@1.5.5/3x2/flags.css\n                                    to avoid installing this package: https://www.npmjs.com/package/country-flag-icons*/}\n                                    <div className={language.className}/>\n                                </div>\n                            </MenuItem>\n                        )\n                    }\n                </Select>\n            </FormControl>\n        </div>\n    )\n}\n","export default __webpack_public_path__ + \"static/media/geekonomy-logo-long.c1ea5f56.svg\";","import * as React from \"react\";\nimport {DecisionControls} from \"../components/DecisionControls/DecisionControls\";\nimport {useEffect, useState} from \"react\";\nimport {GameState} from \"../model\";\nimport {Plots} from \"../components/Plots/Plots\";\nimport {store} from \"../store/store\";\nimport {Engine} from \"../services/Engine\";\nimport {ScoreIndicator} from \"../components/ScoreIndicator/ScoreIndicator\";\nimport {Loading} from \"../components/Loading/Loading\";\nimport styles from './Game.module.scss'\nimport {LanguagePicker} from \"../components/LanguagePicker/LanguagePicker\";\nimport GeekonomyLogo from \"../assets/geekonomy-logo-long.svg\";\nimport {HelpButton} from \"../components/HelpButton/HelpButton\";\n\nexport const GameView: React.FC = () => {\n    const [state, setState] = useState<GameState>({} as GameState)\n    const [loading, setLoading] = useState<Boolean>(true)\n\n\n    useEffect(() => {\n        const getGameState = async () => {\n            try {\n                setLoading(true)\n                await Engine.getGameState()\n                setLoading(false)\n            } catch (e) {\n                console.log('Error on getting game state', e)\n                setTimeout(getGameState, 5000)\n            }\n        }\n\n        getGameState().catch(e => console.log('Error on getting game state', e))\n\n        store.subscribe(() => {\n            setState(store.getState())\n        })\n    }, [])\n\n    return (\n        <div>\n            {loading && <Loading/>}\n            {!loading && <>\n                <div className={styles.controlsContainer}>\n\n                    <div className={styles.rightSide}>\n                        {/*TODO: Help button modal*/}\n                        {/*<HelpButton/>*/}\n                        <LanguagePicker/>\n                        <img src={GeekonomyLogo} alt=\"Geekonomy logo\" className={styles.logo}/>\n                    </div>\n                    <div>\n                        <DecisionControls quizStatus={state.quizStatus} countries={state.countries}/>\n                    </div>\n                    <div>\n                        <ScoreIndicator quizStatus={state.quizStatus} score={state.score}\n                                        lastAnswer={state.lastAnswer}/>\n                    </div>\n                </div>\n                <Plots indicators={state.indicators} lastAnswer={state.lastAnswer}/>\n            </>}\n        </div>\n    )\n}\n","import './App.css';\nimport {GameView} from \"./views/Game\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <GameView/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import i18n from 'i18next'\nimport { initReactI18next } from 'react-i18next'\nimport LanguageDetector from 'i18next-browser-languagedetector'\n\nimport translationEn from './locales/en.json'\nimport translationPl from './locales/pl.json'\n\nconst resources = {\n    en: {\n        translation: translationEn,\n    },\n    pl: {\n        translation: translationPl,\n    },\n}\n\n// @ts-ignore\ni18n.use(LanguageDetector)\n    .use(initReactI18next)\n    .init({\n        resources,\n        fallbackLng: 'en',\n        // keySeparator: false,\n        interpolation: {\n            escapeValue: false,\n        },\n    })\n\nexport default i18n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport './i18n/i18'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"DecisionControls_container__2paiT\",\"button\":\"DecisionControls_button__1VI33\",\"decisionControls\":\"DecisionControls_decisionControls__1KGLM\",\"nextQuiz\":\"DecisionControls_nextQuiz__3NGOv\",\"loadingIndicatorContainer\":\"DecisionControls_loadingIndicatorContainer__28ik5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"LanguagePicker_container__2b-kH\",\"select\":\"LanguagePicker_select__1RxhT\",\"flagEmoji\":\"LanguagePicker_flagEmoji__3l-6K\",\"flag:PL\":\"LanguagePicker_flag:PL__3N4tk\",\"flag:GB\":\"LanguagePicker_flag:GB__2329P\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"plot\":\"Plots_plot__WbCFU\",\"highcharts\":\"Plots_highcharts__1gAik\",\"plots\":\"Plots_plots__2cuRz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"ScoreIndicator_container__1kj0R\",\"score\":\"ScoreIndicator_score__gJmvX\",\"scoreIcon\":\"ScoreIndicator_scoreIcon__3I6f_\",\"answer\":\"ScoreIndicator_answer__3iiG8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"controlsContainer\":\"Game_controlsContainer__1tB-K\",\"rightSide\":\"Game_rightSide__2Rs7D\",\"logo\":\"Game_logo__1ixFn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loading\":\"Loading_loading__3SgGS\",\"circularProgress\":\"Loading_circularProgress__dOjQR\",\"message\":\"Loading_message__3DTTj\"};"],"sourceRoot":""}